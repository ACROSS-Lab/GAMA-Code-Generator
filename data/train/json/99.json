[
    {
        "question": "How can I define the global attributes, actions, and behaviors in a model in gaml?",
        "answer": "global {\n    // Define global attributes here \n    int global_attr1;\n    float global_attr2;\n    // ...\n\n    // Define global actions here    \n    init {\n        // Implementation details\n        create something;\n    }\n    \n    action global_action {\n        // Implementation details\n    }\n    // ...\n}\n"
    },
    {
        "question": "How can I define the species attributes, actions, and behaviors in a model in gaml?",
        "answer": "species {\n    // Define species attributes here\n    \n    // Define species actions here\n    \n    // Define species behaviors here\n}"
    },
    {
        "question": "How can I define the experiment attributes, actions, and behaviors in a model in gaml?",
        "answer": "experiment {\n    // Define species attributes here\n    \n    // Define species actions here\n    \n    // Define species behaviors here\n}"
    },
    {
        "question": "How can you declare and initialize the variable \"nb_preys_init\" to the value 200 in the global section of a GAML model?",
        "answer": "global {\n        int nb_preys_init <- 200;\n        init {\n                create prey number: nb_preys_init;\n        }\n}"
    },
    {
        "question": "How would you modify the provided GAML code to change the initial number of preys from 200 to a different value? Provide the modified code.",
        "answer": "global {\n        int nb_preys_init <- 200;\n        init {\n                create prey number: nb_preys_init;\n        }\n}"
    },
    {
        "question": "What coding approach would you adopt to declare and set the value of \"nb_preys_init\" to 200 within the global segment of a GAML model?",
        "answer": "global {\n        int nb_preys_init <- 200;\n        init {\n                create prey number: nb_preys_init;\n        }\n}"
    },
    {
        "question": "If you wanted to establish the variable \"nb_preys_init\" with an initial value of 200, how would you do so in the global section of a GAML model?",
        "answer": "global {\n        int nb_preys_init <- 200;\n        init {\n                create prey number: nb_preys_init;\n        }\n}"
    },
    {
        "question": "Provide the code snippet that demonstrates the declaration and initialization of the variable \"nb_preys_init\" to 200 in the global section of a GAML model.",
        "answer": "global {\n        int nb_preys_init <- 200;\n        init {\n                create prey number: nb_preys_init;\n        }\n}"
    },
    {
        "question": "In the global section of a GAML model, what specific coding conventions would you follow to declare and set the value of \"nb_preys_init\" to 200?",
        "answer": "global {\n        int nb_preys_init <- 200;\n        init {\n                create prey number: nb_preys_init;\n        }\n}"
    },
    {
        "question": "What is the correct syntax for defining and giving the variable \"nb_preys_init\" an initial value of 200 in the global section of a GAML model?",
        "answer": "global {\n        int nb_preys_init <- 200;\n        init {\n                create prey number: nb_preys_init;\n        }\n}"
    },
    {
        "question": "Describe the process of setting up and assigning the value 200 to the variable \"nb_preys_init\" in the global portion of a GAML model.",
        "answer": "global {\n        int nb_preys_init <- 200;\n        init {\n                create prey number: nb_preys_init;\n        }\n}"
    },
    {
        "question": "If you wanted to establish the variable \"nb_preys_init\" with an initial value of 200, how would you do so in the global section of a GAML model?",
        "answer": "global {\n        int nb_preys_init <- 200;\n        init {\n                create prey number: nb_preys_init;\n        }\n}"
    },
    {
        "question": "How can you declare and initialize the variable \"nb_predators_init\" to the value 500 in the global section of a GAML model?",
        "answer": "global {\n\tint nb_predators_init <- 500;\n\tinit {\n\t\tcreate prey number: nb_predators_init;\n\t}\n}"
    },
    {
        "question": "In the global section of a GAML model, how would you go about declaring and assigning the value 600 to the variable \"nb_predators_init\"?",
        "answer": "global {\n        int nb_predators_init <- 600;\n        init {\n                create prey number: nb_predators_init;\n        }\n}"
    },
    {
        "question": "Could you provide instructions on initializing the variable \"nb_predators_init\" to 700 within the global context of a GAML model?",
        "answer": "global {\n        int nb_predators_init <- 700;\n        init {\n                create prey number: nb_predators_init;\n        }\n}"
    },
    {
        "question": "If you wanted to establish the variable \"nb_predators_init\" with an initial value of 800, how would you do so in the global section of a GAML model?",
        "answer": "global {\n        int nb_predators_init <- 800;\n        init {\n                create prey number: nb_predators_init;\n        }\n}"
    },
    {
        "question": "Provide the code snippet that demonstrates the declaration and initialization of the variable \"nb_predators_init\" to 900 in the global section of a GAML model.",
        "answer": "global {\n        int nb_predators_init <- 900;\n        init {\n                create prey number: nb_predators_init;\n        }\n}"
    },
    {
        "question": "What coding approach would you adopt to declare and set the value of \"nb_predators_init\" to 50 within the global segment of a GAML model?",
        "answer": "global {\n        int nb_predators_init <- 50;\n        init {\n                create prey number: nb_predators_init;\n        }\n}"
    },
    {
        "question": "Generate a gaml code snippet for species",
        "answer": "species {\n    // Define species attributes here\n    \n    // Define species actions here\n    \n    // Define species behaviors here\n}"
    },
    {
        "question": "How would you instruct a text-to-code model to generate a GAML code snippet for a species called \"Prey,\" incorporating attributes such as \"preyID,\" \"posX,\" and \"posY,\" along with an initialization block and an action named \"Move\"?",
        "answer": "species Prey {\n    int preyID;\n    float posX, posY;\n    \n    init {\n        preyID <- rnd(1, 1000);\n        posX <- rnd(-50, 50);\n        posY <- rnd(-50, 50);\n    }\n    \n    action Move {\n        posX <- posX + rnd(-5, 5);\n        posY <- posY + rnd(-5, 5);\n    }\n}"
    },
    {
        "question": "Outline the instructions for a text-to-code model to produce a GAML code snippet featuring a species named \"Prey\" with attributes like \"preyID,\" \"posX,\" and \"posY,\" alongside an initialization block and an action called \"Move.\"",
        "answer": "species Prey {\n    int preyID;\n    float posX, posY;\n    \n    init {\n        preyID <- rnd(1, 1000);\n        posX <- rnd(-50, 50);\n        posY <- rnd(-50, 50);\n    }\n    \n    action Move {\n        posX <- posX + rnd(-5, 5);\n        posY <- posY + rnd(-5, 5);\n    }\n}"
    },
    {
        "question": "Describe the steps to guide a text-to-code model in generating a GAML code snippet that defines a species named \"Prey,\" including attributes such as \"preyID,\" \"posX,\" and \"posY,\" along with an initialization block and an action named \"Move.\"",
        "answer": "species Prey {\n    int preyID;\n    float posX, posY;\n    \n    init {\n        preyID <- rnd(1, 1000);\n        posX <- rnd(-50, 50);\n        posY <- rnd(-50, 50);\n    }\n    \n    action Move {\n        posX <- posX + rnd(-5, 5);\n        posY <- posY + rnd(-5, 5);\n    }\n}"
    },
    {
        "question": "Provide guidance on how to prompt a text-to-code model to create a GAML code snippet depicting a species named \"Prey,\" incorporating attributes like \"preyID,\" \"posX,\" and \"posY,\" as well as an initialization block and an action named \"Move.\"",
        "answer": "species Prey {\n    int preyID;\n    float posX, posY;\n    \n    init {\n        preyID <- rnd(1, 1000);\n        posX <- rnd(-50, 50);\n        posY <- rnd(-50, 50);\n    }\n    \n    action Move {\n        posX <- posX + rnd(-5, 5);\n        posY <- posY + rnd(-5, 5);\n    }\n}"
    },
    {
        "question": "Instruct a text-to-code model to generate a GAML code snippet that introduces a species named \"Prey,\" comprising attributes such as \"preyID,\" \"posX,\" and \"posY,\" along with an initialization block and an action called \"Move.\"",
        "answer": "species Prey {\n    int preyID;\n    float posX, posY;\n    \n    init {\n        preyID <- rnd(1, 1000);\n        posX <- rnd(-50, 50);\n        posY <- rnd(-50, 50);\n    }\n    \n    action Move {\n        posX <- posX + rnd(-5, 5);\n        posY <- posY + rnd(-5, 5);\n    }\n}"
    },
    {
        "question": "generate a gaml code snippet that introduces a species named \"Prey,\" comprising attributes such as \"preyID,\" \"posX,\" and \"posY,\" along with an initialization block and an action called \"Move.\"",
        "answer": "species Prey {\n    int preyID;\n    float posX, posY;\n    \n    init {\n        preyID <- rnd(1, 1000);\n        posX <- rnd(-50, 50);\n        posY <- rnd(-50, 50);\n    }\n    \n    action Move {\n        posX <- posX + rnd(-5, 5);\n        posY <- posY + rnd(-5, 5);\n    }\n}"
    },
    {
        "question": "Generate a GAML code snippet that defines a species named \"Hunter,\" incorporating attributes such as \"hunterID,\" \"posX,\" and \"posY,\" along with an initialization block and an action named \"Track.\"",
        "answer": "species Hunter {\n    int hunterID;\n    float posX, posY;\n    \n    init {\n        hunterID <- rnd(1, 1000);\n        posX <- rnd(-50, 50);\n        posY <- rnd(-50, 50);\n    }\n    \n    action Track {\n        posX <- posX + rnd(-5, 5);\n        posY <- posY + rnd(-5, 5);\n    }\n}"
    },
    {
        "question": "Develop a GAML code snippet presenting a species named \"Explorer,\" featuring attributes like \"explorerID,\" \"latitude,\" and \"longitude,\" along with an initialization block and an action named \"Navigate.\"",
        "answer": "species Explorer {\n    int explorerID;\n    float latitude, longitude;\n    \n    init {\n        explorerID <- rnd(1, 1000);\n        latitude <- rnd(-90, 90);\n        longitude <- rnd(-180, 180);\n    }\n    \n    action Navigate {\n        latitude <- latitude + rnd(-2, 2);\n        longitude <- longitude + rnd(-2, 2);\n    }\n}"
    },
    {
        "question": "Create a GAML code snippet introducing a species named \"Robot,\" containing attributes such as \"robotID,\" \"positionX,\" and \"positionY,\" along with an initialization block and an action named \"MoveForward.\"",
        "answer": "species Robot {\n    int robotID;\n    float positionX, positionY;\n    \n    init {\n        robotID <- rnd(1, 1000);\n        positionX <- rnd(-50, 50);\n        positionY <- rnd(-50, 50);\n    }\n    \n    action MoveForward {\n        positionX <- positionX + rnd(-5, 5);\n        positionY <- positionY + rnd(-5, 5);\n    }\n}"
    },
    {
        "question": "Generate a GAML code snippet defining a species named \"Fish,\" featuring attributes like \"fishID,\" \"depth,\" and \"swimDirection,\" alongside an initialization block and an action called \"Swim.\"",
        "answer": "species Fish {\n    int fishID;\n    float depth, swimDirection;\n    \n    init {\n        fishID <- rnd(1, 1000);\n        depth <- rnd(1, 100);\n        swimDirection <- rnd(0, 360);\n    }\n    \n    action Swim {\n        depth <- depth + rnd(-5, 5);\n        swimDirection <- rnd(0, 360);\n    }\n}"
    },
    {
        "question": "Develop a GAML code snippet for a species named \"Bird,\" including attributes such as \"birdID,\" \"altitude,\" and \"flightDirection,\" along with an initialization block and an action named \"Fly.\"",
        "answer": "species Bird {\n    int birdID;\n    float altitude, flightDirection;\n    \n    init {\n        birdID <- rnd(1, 1000);\n        altitude <- rnd(1, 50);\n        flightDirection <- rnd(0, 360);\n    }\n    \n    action Fly {\n        altitude <- altitude + rnd(-2, 2);\n        flightDirection <- rnd(0, 360);\n    }\n}"
    },
    {
        "question": "Create a GAML code snippet for a species named \"Vehicle,\" containing attributes like \"vehicleID,\" \"speed,\" and \"position,\" alongside an initialization block and an action named \"MoveForward.\"",
        "answer": "species Vehicle {\n    int vehicleID;\n    float speed, position;\n    \n    init {\n        vehicleID <- rnd(1, 1000);\n        speed <- rnd(30, 120);\n        position <- rnd(-100, 100);\n    }\n    \n    action MoveForward {\n        position <- position + speed * rnd(0.8, 1.2);\n    }\n}"
    },
    {
        "question": "Develop a GAML code snippet for a species named \"Human,\" with attributes like \"humanID,\" \"age,\" and \"location,\" along with an initialization block and an action named \"Walk.\"",
        "answer": "species Human {\n    int humanID;\n    int age;\n    float location;\n    \n    init {\n        humanID <- rnd(1, 1000);\n        age <- rnd(1, 100);\n        location <- rnd(-10, 10);\n    }\n    \n    action Walk {\n        location <- location + rnd(-2, 2);\n    }\n}"
    },
    {
        "question": "Generate a GAML code snippet for a species named \"Building,\" featuring attributes such as \"buildingID,\" \"height,\" and \"location,\" alongside an initialization block and an action named \"Collapse.\"",
        "answer": "species Building {\n    int buildingID;\n    float height, location;\n    \n    init {\n        buildingID <- rnd(1, 1000);\n        height <- rnd(10, 100);\n        location <- rnd(-100, 100);\n    }\n    \n    action Collapse {\n        height <- 0;\n    }\n}"
    },
    {
        "question": "Create a GAML code snippet introducing a species named \"Plant,\" including attributes like \"plantID,\" \"growthRate,\" and \"nutrientLevel,\" along with an initialization block and an action named \"Grow.\"",
        "answer": "species Plant {\n    int plantID;\n    float growthRate, nutrientLevel;\n    \n    init {\n        plantID <- rnd(1, 1000);\n        growthRate <- rnd(0.1, 1.0);\n        nutrientLevel <- rnd(0, 100);\n    }\n    \n    action Grow {\n        nutrientLevel <- nutrientLevel + growthRate * rnd(0.8, 1.2);\n    }\n}"
    },
    {
        "question": "Develop a GAML code snippet for a species named \"Insect,\" comprising attributes like \"insectID,\" \"wingColor,\" and \"position,\" along with an initialization block and an action named \"Fly.\"",
        "answer": "species Insect {\n    int insectID;\n    string wingColor;\n    float position;\n    \n    init {\n        insectID <- rnd(1, 1000);\n        wingColor <- choose(\"Red\", \"Green\", \"Blue\");\n        position <- rnd(-10, 10);\n    }\n    \n    action Fly {\n        position <- position + rnd(-2, 2);\n    }\n}"
    },
    {
        "question": "generate a GAML code snippet for the global section of a model, defining attributes such as \"nb_preys_init,\" \"prey_max_energy,\" \"prey_max_transfer,\" and \"prey_energy_consum,\" along with an initialization block that creates a specified number of preys?",
        "answer": "global {\n        int nb_preys_init <- 200;\n        float prey_max_energy <- 1.0;\n        float prey_max_transfer <- 0.1;\n        float prey_energy_consum <- 0.05;\n        \n        init {\n                create prey number: nb_preys_init;\n        }\n}"
    },
    {
        "question": "Develop a GAML code snippet for the global section of a model, defining attributes like \"nb_species_init,\" \"species_max_energy,\" \"species_max_transfer,\" and \"species_energy_consumption,\" along with an initialization block that creates a specific number of species.",
        "answer": "global {\n        int nb_preys_init <- 200;\n        float prey_max_energy <- 1.0;\n        float prey_max_transfer <- 0.1;\n        float prey_energy_consum <- 0.05;\n        \n        init {\n                create prey number: nb_preys_init;\n        }\n}"
    },
    {
        "question": "Provide instructions for generating a GAML code snippet in the global section of a model, introducing variables such as \"nb_cells_init,\" \"cell_max_energy,\" \"cell_max_transfer,\" and \"cell_energy_consumption,\" along with an initialization block creating a designated number of cells.",
        "answer": "global {\n        int nb_preys_init <- 200;\n        float prey_max_energy <- 1.0;\n        float prey_max_transfer <- 0.1;\n        float prey_energy_consum <- 0.05;\n        \n        init {\n                create prey number: nb_preys_init;\n        }\n}"
    },
    {
        "question": "Direct the generation of a GAML code snippet for the global section of a model, defining parameters like \"nb_agents_init,\" \"agent_max_energy,\" \"agent_max_transfer,\" and \"agent_energy_consumption,\" along with an initialization block creating a specified number of agents.",
        "answer": "global {\n        int nb_preys_init <- 200;\n        float prey_max_energy <- 1.0;\n        float prey_max_transfer <- 0.1;\n        float prey_energy_consum <- 0.05;\n        \n        init {\n                create prey number: nb_preys_init;\n        }\n}"
    },
    {
        "question": "",
        "answer": "global {\n    int nb_entities_init <- 100;\n    float entity_max_energy <- 10.0;\n    float entity_max_transfer <- 1.0;\n    float entity_energy_consumption <- 0.1;\n\n    init {\n        create entity number: nb_entities_init;\n    }\n}"
    },
    {
        "question": "generate a GAML code snippet for the global section of a model, defining variables such as \"nb_agents_init,\" \"agent_max_energy,\" \"agent_max_transfer,\" and \"agent_energy_consumption,\" along with an initialization block that creates a predetermined number of agents",
        "answer": "global {\n    int nb_agents_init <- 150;\n    float agent_max_energy <- 8.0;\n    float agent_max_transfer <- 0.8;\n    float agent_energy_consumption <- 0.15;\n\n    init {\n        create agent number: nb_agents_init;\n    }\n}\n"
    },
    {
        "question": "produce a GAML code snippet for the global section of a model, defining attributes such as \"nb_cells_init,\" \"cell_max_energy,\" \"cell_max_transfer,\" and \"cell_energy_consumption,\" accompanied by an initialization block creating a specific number of cells",
        "answer": "global {\n    int nb_cells_init <- 120;\n    float cell_max_energy <- 12.0;\n    float cell_max_transfer <- 1.2;\n    float cell_energy_consumption <- 0.12;\n\n    init {\n        create cell number: nb_cells_init;\n    }\n}"
    },
    {
        "question": "generate a GAML code snippet for the global section of a model, outlining variables like \"nb_species_init,\" \"species_max_energy,\" \"species_max_transfer,\" and \"species_energy_consumption,\" with an initialization block that creates a specified number of species",
        "answer": "global {\n    int nb_species_init <- 80;\n    float species_max_energy <- 6.0;\n    float species_max_transfer <- 0.6;\n    float species_energy_consumption <- 0.18;\n\n    init {\n        create species number: nb_species_init;\n    }\n}"
    },
    {
        "question": "generate a GAML code snippet for the global section of a model, defining variables like \"nb_species_init,\" \"species_max_energy,\" and \"species_type\" with data types \"int,\" \"float,\" and \"string\" respectively, accompanied by an initialization block that creates a specified number of species?",
        "answer": "global {\n    int nb_species_init <- 80;\n    float species_max_energy <- 6.0;\n    string species_type <- \"Mammal\";\n    \n    init {\n        create species number: nb_species_init;\n    }\n}"
    },
    {
        "question": "generate a GAML code snippet for the global section of a model, specifying variables such as \"species_name\" with data type \"string,\" \"species_max_transfer,\" and \"species_energy_consumption\" with data type \"float,\" accompanied by an initialization block that creates a designated number of species?",
        "answer": "global {\n    string species_name <- \"Bird\";\n    float species_max_transfer <- 0.6;\n    float species_energy_consumption <- 0.18;\n\n    init {\n        create species number <- 50;\n    }\n}"
    },
    {
        "question": "generate a GAML code snippet for the global section of a model, defining variables like \"species_name\" with data type \"string,\" \"species_max_transfer,\" and \"species_energy_consumption\" with data type \"float,\" along with an initialization block that creates a specified number of species?",
        "answer": "global {\n    string species_name <- \"Bird\";\n    float species_max_transfer <- 0.6;\n    float species_energy_consumption <- 0.18;\n\n    init {\n        create species number <- 50;\n    }\n}"
    },
    {
        "question": "generate a GAML code snippet for the global section of a model, specifying variables such as \"nb_species_init\" with data type \"int\" and \"species_family\" with data type \"string,\" accompanied by an initialization block that creates a predetermined number of species",
        "answer": "global {\n    int nb_species_init <- 80;\n    string species_family <- \"Reptile\";\n    \n    init {\n        create species number: nb_species_init;\n    }\n}"
    },
    {
        "question": "generate a GAML code snippet for the global section of a model, defining variables such as \"nb_species_init\" with data type \"int\" and \"species_family\" with data type \"string,\" where \"nb_species_init\" is initialized with a random value between 40 and 50, accompanied by an initialization block that creates a specified number of species",
        "answer": "global {\n    int nb_species_init <- rnd(40,50);\n    string species_family <- \"Reptile\";\n    \n    init {\n        create species number: nb_species_init;\n    }\n}"
    },
    {
        "question": "generate a GAML code snippet for the global section of a model, defining variables like \"nb_species_init\" with data type \"int\" and \"species_density\" with data type \"float,\" where \"nb_species_init\" is initialized with a random value between 30 and 60, accompanied by an initialization block that creates a specified number of species",
        "answer": "global {\n    int nb_species_init <- rnd(30, 60);\n    float species_density <- 0.5;\n    \n    init {\n        create species number: nb_species_init;\n    }\n}"
    },
    {
        "question": "generate a GAML code snippet for the global section of a model, specifying variables such as \"nb_species_init\" with data type \"float\" and \"species_type\" with data type \"string,\" where \"nb_species_init\" is initialized with a random value between 40 and 50, accompanied by an initialization block that creates a specified number of species",
        "answer": "global {\n    float nb_species_init <- rnd(40, 50);\n    string species_type <- \"Amphibian\";\n    \n    init {\n        create species number: int(nb_species_init);\n    }\n}"
    },
    {
        "question": "generate a GAML code snippet for the global section of a model, defining variables like \"nb_species_init\" with data type \"float\" and \"species_type\" with data type \"string,\" where \"nb_species_init\" is initialized with a random value between 40 and 50, accompanied by an initialization block that creates a specified number of species?",
        "answer": "global {\n    float nb_species_init <- rnd(40, 50);\n    string species_type <- \"Amphibian\";\n    \n    init {\n        create species number: int(nb_species_init);\n    }\n}\n"
    },
    {
        "question": "generate a GAML code snippet that input data from file \"../includes/building.shp\", \"../includes/road.shp\", \"../includes/bounds.shp\" to create buildings and roads",
        "answer": "global {\n        file shape_file_buildings <- file(\"../includes/building.shp\");\n        file shape_file_roads <- file(\"../includes/road.shp\");\n        file shape_file_bounds <- file(\"../includes/bounds.shp\");\n        geometry shape <- envelope(shape_file_bounds);\n        float step <- 10 #mn;\n        \n        init {\n                create building from: shape_file_buildings with: [type::string(read (\"NATURE\"))] {\n                        if type=\"Industrial\" {\n                                color <- #blue ;\n                        }\n                }\n                create road from: shape_file_roads ;\n        }\n}"
    },
    {
        "question": "generate a GAML code snippet that uses a shapefile ('../includes/agriculture.shp') to create fields, focusing on areas labeled as 'Crop' and assigning them a distinctive color, such as #green",
        "answer": "global {\n        file shape_file_agriculture <- file(\"../includes/agriculture.shp\");\n        geometry shape <- envelope(shape_file_bounds);\n        \n        init {\n                create field from: shape_file_agriculture with: [type::string(read (\"AGRICULTURE\"))] {\n                        if type=\"Crop\" {\n                                color <- #green ;\n                        }\n                }\n        }\n}\n"
    },
    {
        "question": "generating a GAML code snippet similar to the provided example? The objective is to create houses based on a shapefile ('../includes/residential.shp'), specifically differentiating between 'Apartment' and 'House' types and assigning distinctive colors (#yellow for apartments, #orange for houses).",
        "answer": "global {\n        file shape_file_residential <- file(\"../includes/residential.shp\");\n        geometry shape <- envelope(shape_file_bounds);\n        \n        init {\n                create house from: shape_file_residential with: [type::string(read (\"RESIDENTIAL\"))] {\n                        if type=\"Apartment\" {\n                                color <- #yellow ;\n                        }\n                        else if type=\"House\" {\n                                color <- #orange ;\n                        }\n                }\n        }\n}"
    },
    {
        "question": "generate a GAML code snippet akin to the provided example? The goal is to utilize a shapefile ('../includes/commercial.shp') to create shops, distinguishing between 'Retail' and 'Office' types and assigning distinctive colors (#purple for retail, #pink for office)",
        "answer": "global {\n        file shape_file_commercial <- file(\"../includes/commercial.shp\");\n        geometry shape <- envelope(shape_file_bounds);\n        \n        init {\n                create shop from: shape_file_commercial with: [type::string(read (\"COMMERCIAL\"))] {\n                        if type=\"Retail\" {\n                                color <- #purple ;\n                        }\n                        else if type=\"Office\" {\n                                color <- #pink ;\n                        }\n                }\n        }\n}"
    },
    {
        "question": "generating a GAML code snippet similar to the provided example? The objective is to create buildings and roads based on shapefiles ('../includes/building.shp' and '../includes/road.shp' respectively), with specific conditions for 'Industrial' buildings to be colored #blue. Additionally, residential buildings are identified, and a specified number of people (nb_people) are created within these residential buildings",
        "answer": "global {\n        file shape_file_buildings <- file(\"../includes/building.shp\");\n        file shape_file_roads <- file(\"../includes/road.shp\");\n        file shape_file_bounds <- file(\"../includes/bounds.shp\");\n        geometry shape <- envelope(shape_file_bounds);\n        float step <- 10 #mn;\n        int nb_people <- 100;\n        \n        init {\n                create building from: shape_file_buildings with: [type::string(read (\"NATURE\"))] {\n                        if type=\"Industrial\" {\n                                color <- #blue ;\n                        }\n                }\n                create road from: shape_file_roads ;\n                \n                list<building> residential_buildings <- building where (each.type=\"Residential\");\n                create people number: nb_people {\n                        location <- any_location_in (one_of (residential_buildings));\n                }\n        }\n}"
    },
    {
        "question": "generate a GAML code snippet that utilizes a shapefile ('../includes/education.shp') to create educational facilities, specifically schools with an assigned color of #orange. Additionally, a certain number of students (nb_students) should be created and located within buildings labeled as 'School' based on the provided shapefile.",
        "answer": "global {\n        file shape_file_education <- file(\"../includes/education.shp\");\n        geometry shape <- envelope(shape_file_bounds);\n        int nb_students <- 200;\n        \n        init {\n                create school from: shape_file_education with: [type::string(read (\"EDUCATION\"))] {\n                        color <- #orange;\n                }\n                \n                list<building> school_buildings <- building where (each.type=\"School\");\n                create students number: nb_students {\n                        location <- any_location_in (one_of (school_buildings));\n                }\n        }\n}"
    },
    {
        "question": "Generate GAML code using the shapefile '../includes/healthcare.shp' to create hospitals (#red), and generate a specified number of patients located within buildings labeled 'Hospital.'",
        "answer": "global {\n        file shape_file_healthcare <- file(\"../includes/healthcare.shp\");\n        geometry shape <- envelope(shape_file_bounds);\n        int nb_patients <- 150;\n        \n        init {\n                create hospital from: shape_file_healthcare with: [type::string(read (\"HEALTHCARE\"))] {\n                        color <- #red;\n                }\n                \n                list<building> hospital_buildings <- building where (each.type=\"Hospital\");\n                create patients number: nb_patients {\n                        location <- any_location_in (one_of (hospital_buildings));\n                }\n        }\n}"
    },
    {
        "question": "Generate GAML code using the shapefile '../includes/commercial.shp' to create commercial spaces, differentiating between 'Retail' and 'Office' types with colors #purple and #pink, respectively.",
        "answer": "global {\n        file shape_file_commercial <- file(\"../includes/commercial.shp\");\n        geometry shape <- envelope(shape_file_bounds);\n        \n        init {\n                create shop from: shape_file_commercial with: [type::string(read (\"COMMERCIAL\"))] {\n                        if type=\"Retail\" {\n                                color <- #purple ;\n                        }\n                        else if type=\"Office\" {\n                                color <- #pink ;\n                        }\n                }\n        }\n}"
    },
    {
        "question": "create parks using a shapefile ('../includes/parks.shp'), assigning a distinctive color (#green). Specify the necessary components, conditions, and parameters to be included in the GAML code during the generation process.",
        "answer": "global {\n        file shape_file_parks <- file(\"../includes/parks.shp\");\n        geometry shape <- envelope(shape_file_bounds);\n        \n        init {\n                create park from: shape_file_parks with: [type::string(read (\"PARK\"))] {\n                        color <- #green;\n                }\n        }\n}"
    },
    {
        "question": " generate a GAML code structure with distinct sections for global, species, and an experiment section",
        "answer": "global {\n    // Define global attributes here \n\n    // Define global actions here    \n    \n    // Define global behaviors here\n\n}\n\nspecies {\n    // Define species attributes here\n    \n    // Define species actions here\n    \n    // Define species behaviors here\n}\n\nexperiment {\n    // Define species attributes here\n    \n    // Define species actions here\n    \n    // Define species behaviors here\n}"
    },
    {
        "question": "How can I define the species attributes, actions, and behaviors in a model in gaml?",
        "answer": "species {\n    // Define species attributes here \n    int species_attr1;\n    float species_attr2;\n    // ...\n\n    // Define species actions here    \n    init {\n        // Implementation details\n        create something;\n    }\n    \n    action species_action {\n        // Implementation details\n    }\n    // ...\n}"
    },
    {
        "question": "generate experiment code snippet in GAML to display species building, road, people that we define before",
        "answer": "experiment road_traffic type: gui {\n        parameter \"Shapefile for the buildings:\" var: shape_file_buildings category: \"GIS\" ;\n        parameter \"Shapefile for the roads:\" var: shape_file_roads category: \"GIS\" ;\n        parameter \"Shapefile for the bounds:\" var: shape_file_bounds category: \"GIS\" ;\n        parameter \"Number of people agents\" var: nb_people category: \"People\" ;\n        \n        output {\n                display city_display type:3d {\n                        species building aspect: base ;\n                        species road aspect: base ;\n                        species people aspect: base ;\n                }\n        }\n}"
    },
    {
        "question": "generate experiment code snippet in GAML to display species prey with aspect we define in species ",
        "answer": "experiment prey_predator type: gui {\n        parameter \"Initial number of preys: \" var: nb_preys_init min: 1 max: 1000 category: \"Prey\";\n        output {\n                display main_display {\n                        species prey aspect: base;\n                }\n        }\n}"
    },
    {
        "question": "generate a GAML experiment code snippet that involves a species named 'herbivore,' with a defined aspect, and includes parameters for the initial number of herbivores in a GUI output display?",
        "answer": "experiment herbivore_feeding type: gui {\n    parameter \"Initial number of herbivores: \" var: nb_herbivores_init min: 1 max: 1000 category: \"Herbivore\";\n    output {\n        display main_display {\n            species herbivore aspect: base;\n        }\n    }\n}\n"
    },
    {
        "question": "generate a GAML experiment code snippet featuring a species named 'bird' with a defined aspect, and include parameters for the initial number of birds in a GUI output display",
        "answer": "experiment bird_flying type: gui {\n    parameter \"Initial number of birds: \" var: nb_birds_init min: 1 max: 1000 category: \"Bird\";\n    output {\n        display main_display {\n            species birds aspect: draw_bird;\n        }\n    }\n}\n"
    },
    {
        "question": "generate a GAML experiment code snippet to display a species named 'fish' with a defined aspect, incorporating parameters for the initial number of fish in a GUI output display",
        "answer": "experiment fish_swimming type: gui {\n    parameter \"Initial number of fish: \" var: nb_fish_init min: 1 max: 1000 category: \"Fish\";\n    output {\n        display main_display {\n            species fish aspect: drawing_fish;\n        }\n    }\n}\n"
    },
    {
        "question": "generate for me a model for a species predator and an experiment to display it in GAML",
        "answer": "species predator {\n        float size <- 2.0;\n        rgb color <- #red;\n                \n        aspect base {\n                draw square(size) color: color;\n        }\n}\n\nexperiment predator_hunting type: gui {\n        parameter \"Initial number of predators: \" var: nb_predators_init min: 1 max: 1000 category: \"Predator\";\n        output {\n                display main_display {\n                        species predator aspect: base;\n                }\n        }\n}\n"
    },
    {
        "question": "generate for me a model for a species fish and an experiment to display it in GAML",
        "answer": "species fish {\n\tfloat fish_shape <- 0.3;\n\trgb color <- #cyan;\n\t\t\n\taspect display {\n\t\tdraw rectagle(fish_shape) color: color;\n\t}\n}\n\nexperiment fish_swimming type: gui {\n\tparameter \"Initial number of fish: \" var: nb_fish_init min: 1 max: 1000 category: \"Fish\";\n\toutput {\n\t\tdisplay main_display {\n\t\t\tspecies fish aspect: display;\n\t\t}\n\t}\n}\n"
    },
    {
        "question": "give me a model for a species fish and an experiment to display it in GAML",
        "answer": "species plane {\n\tfloat size <- 0.2;\n\trgb color <- #purple;\n\t\t\n\taspect base {\n\t\tdraw circle(size) color: color;\n\t}\n}\n\nexperiment insect_buzzing type: gui {\n\tparameter \"Initial number of insects: \" var: nb_insects_init min: 1 max: 1000 category: \"Insect\";\n\toutput {\n\t\tdisplay main_display {\n\t\t\tspecies insect aspect: circle;\n\t\t}\n\t}\n}\n"
    },
    {
        "question": "give me a GAML code snippet for a grid structure named 'vegetation_cell' with a size of 50x50, considering a neighborhood of 4 cells around the current cell. The attributes include 'max_food,' 'food_prod,' 'food,' a color attribute based on food level, and a list of neighbors at a distance of 2 cells",
        "answer": "grid vegetation_cell width: 50 height: 50 neighbors: 4 {\n\tfloat max_food <- 1.0;\n\tfloat food_prod <- rnd(0.01);\n\tfloat food <- rnd(1.0) max: max_food update: food + food_prod;\n\trgb color <- rgb(int(255 * (1 - food)), 255, int(255 * (1 - food))) update: rgb(int(255 * (1 - food)), 255, int(255 * (1 - food)));\n\tlist<vegetation_cell> neighbors2  <- (self neighbors_at 2);\n}"
    },
    {
        "question": "create a GAML code for a 40x40 'water_cell' grid with a 8-cell neighborhood. Include attributes 'water_level,' 'evaporation_rate,' and 'rainfall' updated with random values. Define a color based on food level and a list of neighbors at a distance of 2 cells.\n\n\n\n\n\n",
        "answer": "grid water_cell width: 40 height: 40 neighbors: 8 {\n    float water_level <- 1.0;\n    float evaporation_rate <- rnd(0.01);\n    float rainfall <- rnd(1.0) max: water_level update: water_level - evaporation_rate + rainfall;\n    rgb color <- rgb(int(50 * (1 - water_level)), int(100 + 155 * water_level), int(50 * (1 - water_level))) update: rgb(int(50 * (1 - water_level)), int(100 + 155 * water_level), int(50 * (1 - water_level)));\n    list<water_cell> nearby_water_sources <- (self neighbors_at 1) if (each.water_level > 0.8);\n}"
    },
    {
        "question": "Make me a grid 'air_quality_cell' 45x45, 8-cell neighborhood, 'pollutant_concentration' and 'pollutant_dispersion' updated randomly. Color based on concentration, and list of neighbors at 1-cell distance with concentration > 0.5.",
        "answer": "grid air_quality_cell width: 45 height: 45 neighbors: 8 {\n    float pollutant_concentration <- rnd(0.1);\n    float pollutant_dispersion <- rnd(0.01);\n    pollutant_concentration <- pollutant_concentration - pollutant_dispersion;\n    rgb color <- rgb(int(255 * (1 - pollutant_concentration)), int(255 * pollutant_concentration), int(255 * (1 - pollutant_concentration)));\n    list<air_quality_cell> polluted_neighbors <- (self neighbors_at 1) if (each.pollutant_concentration > 0.5);\n}"
    },
    {
        "question": "Modify herbivore species to resemble 'prey_bird': 'max_energy,' 'max_transfer,' 'energy_consum,' 'proba_reproduce,' 'nb_max_offsprings,' 'energy_reproduce,' #green color. Add conditional 'energy_from_eat' on food and 'choose_cell' method for max food neighboring cell. Replace icon with 'deer.png' from '../includes/data/'.",
        "answer": "species herbivore parent: generic_species {\n        rgb color <- #green;\n        float max_energy <- herbivore_max_energy;\n        float max_transfer <- herbivore_max_transfer;\n        float energy_consum <- herbivore_energy_consum;\n        float proba_reproduce <- herbivore_proba_reproduce;\n        int nb_max_offsprings <- herbivore_nb_max_offsprings;\n        float energy_reproduce <- herbivore_energy_reproduce;\n        image_file my_icon <- image_file(\"../includes/data/deer.png\");\n\n        float energy_from_eat {\n                float energy_transfer <- 0.0;\n                if(my_cell.food > 0) {\n                        energy_transfer <- min([max_transfer, my_cell.food]);\n                        my_cell.food <- my_cell.food - energy_transfer;\n                }                         \n                return energy_transfer;\n        }\n\n        vegetation_cell choose_cell {\n                return (my_cell.neighbors2) with_max_of (each.food);\n        }\n}"
    },
    {
        "question": "Modify 'prey_bird' species: 'max_energy,' 'max_transfer,' 'energy_consum,' 'proba_reproduce,' 'nb_max_offsprings,' 'energy_reproduce,' #yellow color. Include conditional 'energy_from_eat' on food and 'choose_cell' method for selecting max food neighboring cell. Replace icon with 'bird.png' from '../includes/data/'.",
        "answer": "species prey_bird parent: generic_species {\n        rgb color <- #yellow;\n        float max_energy <- prey_bird_max_energy;\n        float max_transfer <- prey_bird_max_transfer;\n        float energy_consum <- prey_bird_energy_consum;\n        float proba_reproduce <- prey_bird_proba_reproduce;\n        int nb_max_offsprings <- prey_bird_nb_max_offsprings;\n        float energy_reproduce <- prey_bird_energy_reproduce;\n        image_file my_icon <- image_file(\"../includes/data/bird.png\");\n\n        float energy_from_eat {\n                float energy_transfer <- 0.0;\n                if(my_cell.food > 0) {\n                        energy_transfer <- min([max_transfer, my_cell.food]);\n                        my_cell.food <- my_cell.food - energy_transfer;\n                }                         \n                return energy_transfer;\n        }\n\n        vegetation_cell choose_cell {\n                return (my_cell.neighbors2) with_max_of (each.food);\n        }\n}"
    },
    {
        "question": "make for me a 'prey' species: 'max_energy,' 'max_transfer,' 'energy_consum,' 'proba_reproduce,' 'nb_max_offsprings,' 'energy_reproduce,' #blue color. Include conditional 'energy_from_eat' on food and 'choose_cell' method for selecting max food neighboring cell. Replace icon with 'sheep.png' from '../includes/data/'.",
        "answer": "species prey parent: generic_species {\n        rgb color <- #blue;\n        float max_energy <- prey_max_energy;\n        float max_transfer <- prey_max_transfer;\n        float energy_consum <- prey_energy_consum;\n        float proba_reproduce <- prey_proba_reproduce;\n        int nb_max_offsprings <- prey_nb_max_offsprings;\n        float energy_reproduce <- prey_energy_reproduce;\n        image_file my_icon <- image_file(\"../includes/data/sheep.png\");\n\n        float energy_from_eat {\n                float energy_transfer <- 0.0;\n                if(my_cell.food > 0) {\n                        energy_transfer <- min([max_transfer, my_cell.food]);\n                        my_cell.food <- my_cell.food - energy_transfer;\n                }                         \n                return energy_transfer;\n        }\n\n        vegetation_cell choose_cell {\n                return (my_cell.neighbors2) with_max_of (each.food);\n        }\n}"
    },
    {
        "question": "create a GAML code for 'prey_bird': 'max_energy,' 'max_transfer,' 'energy_consum,' 'proba_reproduce,' 'nb_max_offsprings,' 'energy_reproduce,' #yellow color. Conditional 'energy_from_eat' on food. Method 'choose_cell' selects max food neighboring cell. Icon: 'bird.png' from '../includes/data/'.",
        "answer": "species prey_bird parent: generic_species {\n\trgb color <- #yellow;\n\tfloat max_energy <- prey_bird_max_energy, max_transfer <- prey_bird_max_transfer, energy_consum <- prey_bird_energy_consum, proba_reproduce <- prey_bird_proba_reproduce;\n\tint nb_max_offsprings <- prey_bird_nb_max_offsprings;\n\tfloat energy_reproduce <- prey_bird_energy_reproduce;\n\timage_file my_icon <- image_file(\"../includes/data/bird.png\");\n\n\tfloat energy_from_eat {\n\t\treturn (my_cell.food > 0) ? min([max_transfer, my_cell.food]) : 0.0;\n\t}\n\n\tvegetation_cell choose_cell {\n\t\treturn (my_cell.neighbors2) with_max_of (each.food);\n\t}\n}"
    },
    {
        "question": "Create a GAML code snippet for the parent species \"generic_species\" with shared attributes. Other species inheriting from \"generic_species\" can access these common attributes.",
        "answer": "species generic_species {\n\tfloat size <- 1.0;\n        rgb color;\n        float max_energy;\n        float energy_consum; \n        float proba_reproduce;\n        float energy_reproduce;\n        int nb_max_offsprings;\n        image_file my_icon;\n        vegetation_cell my_cell <- one_of(vegetation_cell);\n        float energy <- rnd(max_energy) update: energy - energy_consum max: max_energy;\n\n        init {\n                location <- my_cell.location;\n        }\n\n        reflex basic_move {\n                my_cell <- choose_cell();\n                location <- my_cell.location;\n        }\n\n        reflex eat {\n                energy <- energy + energy_from_eat();                \n        }\n\n        reflex die when: energy <= 0 {\n                do die;\n        }\n\n        reflex reproduce when: (energy >= energy_reproduce) and (flip(proba_reproduce)) {\n                int nb_offsprings <- rnd(1, nb_max_offsprings);\n                create species(self) number: nb_offsprings {\n                        my_cell <- myself.my_cell;\n                        location <- my_cell.location;\n                        energy <- myself.energy / nb_offsprings;\n                }\n\n                energy <- energy / nb_offsprings;\n        }\n\n        float energy_from_eat {\n                return 0.0;\n        }\n\n        vegetation_cell choose_cell {\n                return nil;\n        }\n        aspect icon {\n                draw my_icon size: 2 * size;\n        }\n\n        aspect info {\n                draw square(size) color: color;\n                draw string(energy with_precision 2) size: 3 color: #black;\n        }\n}\n"
    },
    {
        "question": "Create a GAML code snippet for the parent species \"cars\" with shared attributes. Other species inheriting from \"cars\" can access these common attributes.",
        "answer": "species cars {\n    float size <- 1.0;\n    rgb color;\n    float max_speed;\n    float acceleration;\n    float proba_reproduce;\n    float energy_reproduce;\n    int nb_max_offsprings;\n    road_cell my_cell <- one_of(road_cell);\n    float energy <- rnd(max_energy) update: energy - energy_consum max: max_energy;\n\n    init {\n        location <- my_cell.location;\n    }\n\n    reflex move {\n        my_cell <- choose_cell();\n        location <- my_cell.location;\n    }\n\n    reflex refuel when: energy <= max_energy / 2 {\n        energy <- energy + energy_refuel();\n    }\n\n    reflex die when: energy <= 0 {\n        do die;\n    }\n\n    reflex reproduce when: (energy >= energy_reproduce) and (flip(proba_reproduce)) {\n        int nb_offsprings <- rnd(1, nb_max_offsprings);\n        create species(self) number: nb_offsprings {\n            my_cell <- myself.my_cell;\n            location <- my_cell.location;\n            energy <- myself.energy / nb_offsprings;\n        }\n        energy <- energy / nb_offsprings;\n    }\n\n    float energy_refuel {\n        return max_energy - energy;\n    }\n\n    road_cell choose_cell {\n        return nil; // Replace with your logic for choosing a road cell\n    }\n\n    aspect info {\n        draw square(size) color: color;\n        draw string(energy with_precision 2) size: 3 color: #black;\n    }\n}\n"
    },
    {
        "question": "generate parent species named boat in GAML which contains all common attributes of \"boat\" for other species with type boat to inheritant",
        "answer": "species boats  {\n    float size <- 1.0;\n    rgb color;\n    float max_speed, acceleration, proba_reproduce, energy_reproduce;\n    int nb_max_offsprings;\n    water_cell my_cell <- one_of(water_cell);\n    float energy <- rnd(max_energy) update: energy - energy_consum max: max_energy;\n\n    init {\n        location <- my_cell.location;\n    }\n\n    reflex move {\n        my_cell <- choose_cell();\n        location <- my_cell.location;\n    }\n\n    reflex refuel when: energy <= max_energy / 2 {\n        energy <- energy + energy_refuel();\n    }\n\n    reflex die when: energy <= 0 {\n        do die;\n    }\n\n    reflex reproduce when: (energy >= energy_reproduce) and (flip(proba_reproduce)) {\n        int nb_offsprings <- rnd(1, nb_max_offsprings);\n        create species(self) number: nb_offsprings {\n            my_cell <- myself.my_cell;\n            location <- my_cell.location;\n            energy <- myself.energy / nb_offsprings;\n        }\n        energy <- energy / nb_offsprings;\n    }\n\n    float energy_refuel {\n        return max_energy - energy;\n    }\n\n    water_cell choose_cell {\n        return nil; // Replace with your logic for choosing a water cell\n    }\n\n    aspect icon {\n        draw my_icon size: 2 * size;\n    }\n\n    aspect info {\n        draw square(size) color: color;\n        draw string(energy with_precision 2) size: 3 color: #black;\n    }\n}"
    },
    {
        "question": "generate species that inheritant species boat",
        "answer": "species speedboat parent: boat {\n    rgb color <- #blue; // Customize the color for speedboats\n    float max_speed <- 30.0; // Customize the maximum speed for speedboats\n    float acceleration <- 5.0; // Customize the acceleration for speedboats\n\n    reflex accelerate {\n        max_speed <- min([max_speed + acceleration, 50.0]); // Adjust the acceleration logic as needed\n    }\n\n    reflex decelerate {\n        max_speed <- max([max_speed - acceleration, 0.0]); // Adjust the deceleration logic as needed\n    }\n\n    water_cell choose_cell {\n        // Implement specific logic for choosing a water cell for speedboats\n        return nil;\n    }\n}"
    },
    {
        "question": "provide a GAML code snippet for a \"taxi\" species that inherits from the parent species \"car\". Customize attributes such as color, maximum speed, and acceleration for taxis. Additionally, implement specific behaviors like honking and choosing a road cell for taxis.",
        "answer": "species taxi parent: car {\n    rgb color <- #yellow; // Customize the color for taxis\n    float max_speed <- 20.0; // Customize the maximum speed for taxis\n    float acceleration <- 3.0; // Customize the acceleration for taxis\n\n    reflex honk {\n        // Implement specific logic for honking for taxis\n        // For example, play a honking sound or increase energy consumption\n    }\n\n    road_cell choose_cell {\n        // Implement specific logic for choosing a road cell for taxis\n        return nil;\n    }\n}"
    },
    {
        "question": "make a GAML code snippet for a \"truck\" species inheriting from the parent species \"car\"? Please customize attributes such as color, maximum speed, acceleration, and cargo capacity for trucks. Additionally, implement specific behaviors like cargo loading, cargo unloading, and choosing a road cell for trucks.",
        "answer": "species truck parent: car {\n    rgb color <- #gray; // Customize the color for trucks\n    float max_speed <- 15.0; // Customize the maximum speed for trucks\n    float acceleration <- 2.0; // Customize the acceleration for trucks\n    float cargo_capacity <- 100.0; // Customize the cargo capacity for trucks\n\n    reflex load_cargo {\n        // Implement specific logic for loading cargo into trucks\n        // Adjust energy consumption or other parameters accordingly\n    }\n\n    reflex unload_cargo {\n        // Implement specific logic for unloading cargo from trucks\n        // Adjust energy consumption or other parameters accordingly\n    }\n\n    road_cell choose_cell {\n        // Implement specific logic for choosing a road cell for trucks\n        return nil;\n    }\n}"
    },
    {
        "question": "give me a GAML code snippet name nissan inheritant from species name \"car\"",
        "answer": "species nissan parent: car {\n    rgb color <- #silver; // Customize the color for Nissans\n    float max_speed <- 25.0; // Customize the maximum speed for Nissans\n    float acceleration <- 4.0; // Customize the acceleration for Nissans\n\n    reflex play_music {\n        // Implement specific logic for playing music in Nissans\n        // Adjust energy consumption or other parameters accordingly\n    }\n\n    road_cell choose_cell {\n        // Implement specific logic for choosing a road cell for Nissans\n        return nil;\n    }\n}"
    },
    {
        "question": "give me a full model code snippet in GAML for example",
        "answer": "model prey_predator\nglobal {\n        int nb_preys_init <- 150; // Fewer initial preys\n        init {\n                create prey number: nb_preys_init;\n        }\n}\n\nspecies prey {\n        float size <- 1.0;\n        rgb color <- #blue;\n                 \n        aspect base {\n                draw circle(size) color: color;\n        }\n} \n\nexperiment prey_predator_5 type: gui {\n        parameter \"Initial number of preys: \" var: nb_preys_init min: 1 max: 1000 category: \"Prey\";\n        output {\n                display main_display {\n                        species prey aspect: base;\n                }\n        }\n}"
    },
    {
        "question": "generate a model name 'cars_simulation' in GAML",
        "answer": "model cars_simulation\n\nglobal {\n        int nb_cars_init <- 30; // Fewer initial cars\n        init {\n                create car number: nb_cars_init;\n        }\n}\n\nspecies car {\n        float size <- 1.0;\n        rgb color <- #yellow;\n                \n        aspect base {\n                draw rectangle(size, size/2) color: color;\n        }\n} \n\nexperiment cars_simulation_4 type: gui {\n        parameter \"Initial number of cars: \" var: nb_cars_init min: 1 max: 500 category: \"Cars\";\n        output {\n                display main_display {\n                        species car aspect: base;\n                }\n        }\n}\n"
    },
    {
        "question": "give me a model name 'city_traffic_simulation' in GAML",
        "answer": "model city_traffic_simulation\n\nglobal {\n        int nb_cars_init <- 40; // Adjusted initial cars\n        init {\n                create car number: nb_cars_init;\n        }\n}\n\nspecies car {\n        float size <- 1.0;\n        rgb color <- #purple; // Different color\n                \n        aspect base {\n                draw rectangle(size, size/2) color: color;\n        }\n} \n\nexperiment city_traffic_simulation type: gui {\n        parameter \"Initial number of cars: \" var: nb_cars_init min: 1 max: 500 category: \"Cars\";\n        output {\n                display main_display {\n                        species car aspect: base;\n                }\n        }\n}"
    },
    {
        "question": "make model that modeling air pollution data in GAML",
        "answer": "model air_pollution\n\nglobal {\n        int nb_pollutants_init <- 5; // Initial number of pollutants\n        init {\n                create pollutant number: nb_pollutants_init;\n        }\n}\n\nspecies pollutant {\n        float size <- 1.0;\n        rgb color <- #gray; // Color representing pollutants\n                \n        aspect base {\n                draw circle(size) color: color;\n        }\n} \n\nexperiment air_pollution_simulation type: gui {\n        parameter \"Initial number of pollutants: \" var: nb_pollutants_init min: 1 max: 100 category: \"Pollutants\";\n        output {\n                display main_display {\n                        species pollutant aspect: base;\n                }\n        }\n}"
    },
    {
        "question": "make a model in GAML to simulate data to manage the number of sick people",
        "answer": "model sickness_spread\n\nglobal {\n        int nb_people_init <- 50; // Initial number of people\n        init {\n                create person number: nb_people_init;\n        }\n}\n\nspecies person {\n        float size <- 1.0;\n        rgb color <- #red; // Color representing people\n                \n        aspect base {\n                draw circle(size) color: color;\n        }\n} \n\nexperiment sickness_spread_simulation type: gui {\n        parameter \"Initial number of people: \" var: nb_people_init min: 1 max: 500 category: \"People\";\n        output {\n                display main_display {\n                        species person aspect: base;\n                }\n        }\n}"
    },
    {
        "question": "from model sickness_spread in GAML before, make species 'mosquito'",
        "answer": "model sickness_spread\n\nglobal {\n        int nb_people_init <- 50; // Initial number of people\n        int nb_mosquitoes_init <- 20; // Initial number of mosquitoes\n        init {\n                create person number: nb_people_init;\n                create mosquito number: nb_mosquitoes_init;\n        }\n}\n\nspecies person {\n        float size <- 1.0;\n        rgb color <- #red; // Color representing people\n                \n        aspect base {\n                draw circle(size) color: color;\n        }\n} \n\nspecies mosquito {\n        float size <- 0.5;\n        rgb color <- #brown; // Color representing mosquitoes\n                \n        aspect base {\n                draw circle(size) color: color;\n        }\n} \n\nexperiment sickness_spread_simulation type: gui {\n        parameter \"Initial number of people: \" var: nb_people_init min: 1 max: 500 category: \"People\";\n        parameter \"Initial number of mosquitoes: \" var: nb_mosquitoes_init min: 1 max: 100 category: \"Mosquitoes\";\n        output {\n                display main_display {\n                        species person aspect: base;\n                        species mosquito aspect: base;\n                }\n        }\n}"
    },
    {
        "question": "from the previous model air_pollution in GAML, make a species 'car'",
        "answer": "model air_pollution_simulation\n\nglobal {\n        int nb_pollutants_init <- 5; // Initial number of pollutants\n        int nb_cars_init <- 10; // Initial number of cars\n        init {\n                create pollutant number: nb_pollutants_init;\n                create car number: nb_cars_init;\n        }\n}\n\nspecies pollutant {\n        float size <- 1.0;\n        rgb color <- #gray; // Color representing pollutants\n                \n        aspect base {\n                draw circle(size) color: color;\n        }\n} \n\nspecies car {\n        float size <- 1.0;\n        rgb color <- #blue; // Color representing cars\n                \n        aspect base {\n                draw rectangle(size, size/2) color: color;\n        }\n} \n\nexperiment air_pollution_simulation type: gui {\n        parameter \"Initial number of pollutants: \" var: nb_pollutants_init min: 1 max: 100 category: \"Pollutants\";\n        parameter \"Initial number of cars: \" var: nb_cars_init min: 1 max: 50 category: \"Cars\";\n        output {\n                display main_display {\n                        species pollutant aspect: base;\n                        species car aspect: base;\n                }\n        }\n}"
    },
    {
        "question": "make a model prey in GAML. Define species prey and an environment with vegetation for it to simulate its environment in real life",
        "answer": "model prey\n\nglobal {\n        int nb_preys_init <- 200;\n        init {\n                create prey number: nb_preys_init;\n        }\n}\n\nspecies prey {\n        float size <- 1.0;\n        rgb color <- #blue;\n        vegetation_cell my_cell <- one_of (vegetation_cell);\n                \n        init {\n                location <- my_cell.location;\n        }\n\n        aspect base {\n                draw circle(size) color: color;\n        }\n}\n\ngrid vegetation_cell width: 50 height: 50 neighbors: 4 {\n        float max_food <- 1.0;\n        float food_prod <- rnd(0.01);\n        float food <- rnd(1.0) max: max_food update: food + food_prod;\n        rgb color <- rgb(int(255 * (1 - food)), 255, int(255 * (1 - food))) update: rgb(int(255 * (1 - food)), 255, int(255 * (1 - food)));\n}\n\nexperiment prey_predator type: gui {\n        parameter \"Initial number of preys: \" var: nb_preys_init min: 1 max: 1000 category: \"Prey\";\n        output {\n                display main_display {\n                        grid vegetation_cell border: #black;\n                        species prey aspect: base;\n                }\n        }\n}"
    },
    {
        "question": "from a pollution model bafore, generate a grid name 'pollution_cell' to evaluate pollution on each area in GAML",
        "answer": "model pollution\n\nglobal {\n        int nb_pollutants_init <- 50;\n        init {\n                create pollutant number: nb_pollutants_init;\n        }\n}\n\nspecies pollutant {\n        float size <- 1.0;\n        rgb color <- #gray;\n        pollution_cell my_cell <- one_of(pollution_cell);\n                \n        init {\n                location <- my_cell.location;\n        }\n\n        aspect base {\n                draw circle(size) color: color;\n        }\n}\n\ngrid pollution_cell width: 50 height: 50 neighbors: 4 {\n        float max_pollution <- 1.0;\n        float pollution_prod <- rnd(0.01);\n        float pollution <- rnd(1.0) max: max_pollution update: pollution + pollution_prod;\n        rgb color <- rgb(int(255 * pollution), int(255 * (1 - pollution)), 0) update: rgb(int(255 * pollution), int(255 * (1 - pollution)), 0);\n}\n\nexperiment pollution type: gui {\n        parameter \"Initial number of pollutants: \" var: nb_pollutants_init min: 1 max: 500 category: \"Pollutants\";\n        output {\n                display main_display {\n                        grid pollution_cell border: #black;\n                        species pollutant aspect: base;\n                }\n        }\n}"
    },
    {
        "question": "make a prey model which they can move aroung a grid name 'vegetation_cell' and eat vegetable from it in GAML code",
        "answer": "model prey\nglobal {\n        int nb_preys_init <- 200;\n        float prey_max_energy <- 1.0;\n        float prey_max_transfer <- 0.1;\n        float prey_energy_consum <- 0.05;\n        \n        init {\n                create prey number: nb_preys_init;\n        }\n}\n\nspecies prey {\n        float size <- 1.0;\n        rgb color <- #blue;\n        float max_energy <- prey_max_energy;\n        float max_transfer <- prey_max_transfer;\n        float energy_consum <- prey_energy_consum;\n                \n        vegetation_cell my_cell <- one_of (vegetation_cell); \n        float energy <- rnd(max_energy)  update: energy - energy_consum max: max_energy;\n                \n        init { \n                location <- my_cell.location;\n        }\n\n        reflex basic_move {\n                my_cell <- one_of(my_cell.neighbors2);\n                location <- my_cell.location;\n        }\n        reflex eat when: my_cell.food > 0 { \n                float energy_transfer <- min([max_transfer, my_cell.food]);\n                my_cell.food <- my_cell.food - energy_transfer;\n                energy <- energy + energy_transfer;\n        }\n        reflex die when: energy <= 0 {\n                do die;\n        }\n\n        aspect base {\n                draw circle(size) color: color;\n        }\n}\n\ngrid vegetation_cell width: 50 height: 50 neighbors: 4 {\n        float max_food <- 1.0;\n        float food_prod <- rnd(0.01);\n        float food <- rnd(1.0) max: max_food update: food + food_prod;\n        rgb color <- rgb(int(255 * (1 - food)), 255, int(255 * (1 - food))) update: rgb(int(255 * (1 - food)), 255, int(255 * (1 - food)));\n        list<vegetation_cell> neighbors2  <- (self neighbors_at 2);\n}\n\nexperiment prey_predator type: gui {\n        parameter \"Initial number of preys: \" var: nb_preys_init min: 1 max: 1000 category: \"Prey\";\n        parameter \"Prey max energy: \" var: prey_max_energy category: \"Prey\";\n        parameter \"Prey max transfer: \" var: prey_max_transfer  category: \"Prey\";\n        parameter \"Prey energy consumption: \" var: prey_energy_consum  category: \"Prey\";\n        output {\n                display main_display {\n                        grid vegetation_cell border: #black;\n                        species prey aspect: base;\n                }\n        }\n}\n"
    },
    {
        "question": "make a model name water_pollution by GAML, and species name vehicles in it. The more vehicles move around the grid, the more pollution in the neighborhood becomes worse. the rate of pollution bases on the density of the cell grid i",
        "answer": "model water_pollution\n\nglobal {\n        int nb_vehicles_init <- 10;\n        float vehicle_max_movement <- 2.0;\n        float vehicle_pollution_rate <- 0.02;\n        \n        init {\n                create vehicle number: nb_vehicles_init;\n        }\n}\n\nspecies vehicle {\n        float size <- 0.7;\n        rgb color <- #black;\n        float max_movement <- vehicle_max_movement;\n        float pollution_rate <- vehicle_pollution_rate;\n                \n        pollution_cell my_cell <- one_of (pollution_cell); \n\n        reflex move {\n                my_cell <- one_of(my_cell.neighbors2);\n                location <- my_cell.location;\n                my_cell.pollution <- my_cell.pollution + pollution_rate;\n        }\n\n        aspect base {\n                draw circle(size) color: color;\n        }\n}\n\ngrid pollution_cell width: 50 height: 50 neighbors: 4 {\n        float max_pollution <- 1.0;\n        float pollution <- rnd(0.5) max: max_pollution;\n        rgb color <- rgb(int(255 * pollution), int(255 * (1 - pollution)), 255) update: rgb(int(255 * pollution), int(255 * (1 - pollution)), 255);\n        list<pollution_cell> neighbors2  <- (self neighbors_at 2);\n}\n\nexperiment pollution type: gui {\n        parameter \"Initial number of vehicles: \" var: nb_vehicles_init min: 1 max: 100 category: \"Vehicles\";\n        parameter \"Vehicle max movement: \" var: vehicle_max_movement category: \"Vehicles\";\n        parameter \"Vehicle pollution rate: \" var: vehicle_pollution_rate  category: \"Vehicles\";\n        output {\n                display main_display {\n                        grid pollution_cell border: #black;\n                        species vehicle aspect: base;\n                }\n        }\n}"
    },
    {
        "question": "make a model name deforestation simulate the deforestation from reality by GAML",
        "answer": "model deforestation\n\nglobal {\n        int nb_trees_init <- 50;\n        float tree_growth_rate <- 0.02;\n        \n        init {\n                create tree number: nb_trees_init;\n        }\n}\n\nspecies tree {\n        float size <- 1.0;\n        rgb color <- #green;\n        float growth_rate <- tree_growth_rate;\n                \n        soil_cell my_cell <- one_of(soil_cell); \n\n        reflex grow {\n                size <- size + growth_rate;\n        }\n\n        aspect base {\n                draw circle(size) color: color;\n        }\n}\n\ngrid soil_cell width: 50 height: 50 neighbors: 4 {\n        rgb color <- #brown;\n        list<soil_cell> neighbors2  <- (self neighbors_at 2);\n}\n\nexperiment deforestation type: gui {\n        parameter \"Initial number of trees: \" var: nb_trees_init min: 1 max: 100 category: \"Trees\";\n        parameter \"Tree growth rate: \" var: tree_growth_rate category: \"Trees\";\n        output {\n                display main_display {\n                        grid soil_cell border: #black;\n                        species tree aspect: base;\n                }\n        }\n}\n"
    },
    {
        "question": "make a model simulate industrial waste by factory and people by GAML code",
        "answer": "model industrial_waste_with_people\n\nglobal {\n        int nb_factories_init <- 5;\n        int nb_people_init <- 50;\n        float factory_pollution_rate <- 0.04;\n        float people_movement_rate <- 0.03;\n        \n        init {\n                create factory number: nb_factories_init;\n                create people number: nb_people_init;\n        }\n}\n\nspecies factory {\n        float size <- 1.0;\n        rgb color <- #gray;\n        float pollution_rate <- factory_pollution_rate;\n                \n        water_cell my_cell <- one_of(water_cell); \n\n        reflex pollute {\n                my_cell <- one_of(my_cell.neighbors2);\n                my_cell.water_pollution <- my_cell.water_pollution + pollution_rate;\n        }\n\n        aspect base {\n                draw circle(size) color: color;\n        }\n}\n\nspecies people {\n        float size <- 0.7;\n        rgb color <- #yellow;\n        float movement_rate <- people_movement_rate;\n                \n        water_cell my_cell <- one_of(water_cell); \n\n        reflex move {\n                my_cell <- one_of(my_cell.neighbors2);\n                location <- my_cell.location;\n        }\n\n        aspect base {\n                draw circle(size) color: color;\n        }\n}\n\ngrid water_cell width: 50 height: 50 neighbors: 4 {\n        float max_water_pollution <- 1.0;\n        float water_pollution <- rnd(0.5) max: max_water_pollution;\n        rgb color <- rgb(int(255 * water_pollution), int(255 * (1 - water_pollution)), 255) update: rgb(int(255 * water_pollution), int(255 * (1 - water_pollution)), 255);\n        list<water_cell> neighbors2  <- (self neighbors_at 2);\n}\n\nexperiment industrial_waste_with_people type: gui {\n        parameter \"Initial number of factories: \" var: nb_factories_init min: 1 max: 20 category: \"Factories\";\n        parameter \"Factory pollution rate: \" var: factory_pollution_rate category: \"Factories\";\n        parameter \"Initial number of people: \" var: nb_people_init min: 1 max: 100 category: \"People\";\n        parameter \"People movement rate: \" var: people_movement_rate category: \"People\";\n        output {\n                display main_display {\n                        grid water_cell border: #black;\n                        species factory aspect: base;\n                        species people aspect: base;\n                }\n        }\n}\n"
    },
    {
        "question": "make a industrial model to simulation pollution made by factory in GAML",
        "answer": "model industrial_emissions\n\nglobal {\n        int nb_factories_init <- 5;\n        float factory_pollution_rate <- 0.04;\n        \n        init {\n                create factory number: nb_factories_init;\n        }\n}\n\nspecies factory {\n        float size <- 1.0;\n        rgb color <- #gray;\n        float pollution_rate <- factory_pollution_rate;\n                \n        air_cell my_cell <- one_of(air_cell); \n\n        reflex emit_pollution {\n                my_cell <- one_of(my_cell.neighbors2);\n                my_cell.air_pollution <- my_cell.air_pollution + pollution_rate;\n        }\n\n        aspect base {\n                draw circle(size) color: color;\n        }\n}\n\ngrid air_cell width: 50 height: 50 neighbors: 4 {\n        float max_air_pollution <- 1.0;\n        float air_pollution <- rnd(0.5) max: max_air_pollution;\n        rgb color <- rgb(int(255 * air_pollution), int(255 * (1 - air_pollution)), 255) update: rgb(int(255 * air_pollution), int(255 * (1 - air_pollution)), 255);\n        list<air_cell> neighbors2  <- (self neighbors_at 2);\n}\n\nexperiment industrial_emissions type: gui {\n        parameter \"Initial number of factories: \" var: nb_factories_init min: 1 max: 20 category: \"Factories\";\n        parameter \"Factory pollution rate: \" var: factory_pollution_rate category: \"Factories\";\n        output {\n                display main_display {\n                        grid air_cell border: #black;\n                        species factory aspect: base;\n                }\n        }\n}"
    }
]